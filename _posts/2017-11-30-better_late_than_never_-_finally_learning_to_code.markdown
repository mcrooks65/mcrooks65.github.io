---
layout: post
title:      "Better Late than Never - Finally Learning to Code"
date:       2017-11-30 18:27:58 -0500
permalink:  better_late_than_never_-_finally_learning_to_code
---

        This isn't the first time i've gotten involved with programming - but I have finally come around to the fact that pursuing it as more than just a hobby is becoming a necessity.  Not only does the skillset command respectable pay, but if I ever want to consider myself a bonafide game developer, then it's high time I take the coding side of it much more seriously.  I can't yet say with confidence that I have a single programming language I'm fluent in.  But hopefully within the next six months I'll have far more than one language to boast.  Diving into the Full Stack curriculum at Flatiron School's platform on learn.co has been nothing short of fun.  They smartly gamify everything with objectives and test driven development.  I was hooked on their free bootcamp and saw quickly how it stood out from the myriad of others online.  It reignited a passion for code I haven't seriously pursued since college and for that i'm thankful. 
        Looking back a full decade to when I was a sophomore at UC Davis, I was in the latter phase of deciding my major.  The only thing in my mind that kept me from picking up Computer Science as my major was the math requirements to complete it.  I was downright afraid of tackling the advanced math classes.  As it turned out when I ended up pursuing a Bachelor of Science in Psychology with a Biology emphasis, I still had to take calculus, and organic chemistry, to this day the hardest lifts i’ve ever had mentally.  I had to retake them, but I did pass them on take 2, so perhaps I could have hacked the advanced math required in a CS degree after all.  I wanted to take whatever programming classes I could still, and since I didn’t major in CS I was limited to an introductory programming course that would cover the basics of C.  I thought it was the coolest course ever.  
        Logging into the schools cs-servers remotely with good old PuTTY to access a unix terminal and write our homework code assignments with Vi.  I was hooked on all of it.  Learning to navigate Unix was awesome, i’ve built numerous Unix based systems in the decade since.  I remember being on top of things at the start of the class since i’d had some previous knowledge from middle and high school and playing with myriad other languages in rudimentary ways. Languages like Pascal, Scheme, Visual Basic, and later Python on my own with internet tutorials.  But as we got to the more advanced parts of the course, where we would work with partners on a month long project creating an airline booking system from scratch, I hit a hard learning curve.  I remember just how hard things got as I constantly confused pointers and the compiler kept spitting out memory errors indicating my pointers were off again.  After some hours staring down the code and then finally flicking the right switch - one missing asterisk finally set in place and the entire thing worked exactly as intended after days of painstakingly testing out each section of the program.  You just can’t beat that feeling when everything works as intended.
        Getting over that giant project hurdle made it possible for me to ace the final exam - which was a pen and paper exam!  The professor stated on the board what the program should do, and we simply wrote our programs on regular college ruled paper.  When I got that A+ I should have seen the light and majored in CS, but I still had a fascination with psychology I wanted to pursue and I was told the particular major would keep the door to med school open.
So my coding education from then on had to be sought after independently.  I recall as I was rounding off the end of the semester with the programming class, I had started working with my brother Chris on a game project called Gnosis.  It was a MUSH (Multi User Shared Hallucination) which is no different really than the old text adventure games with the exception that lots of other players could roam around the world with you as a single instance of the game that would run on a web server players would connect to.  We had all sorts of fun ideas for a post-apocalyptic world, all of course which would be written not pictured.  We never really intended to make it a big commercial project or anything, we really just did it to see if we could.  I recall learning how to build out from a blank world in TinyMUX, softcoding the actual game from inside a running server. This language used to softcode inside of TinyMUX was only used in this narrow context, to produce MUSH games. However the logic I used to tinker around with it over the years clearly applied and thus this experiment would reinforce what I learned and remind me that I should have probably just majored in compsci.         Gnosis was a fun experiment that was never intended to go anywhere, but it was neither the first nor the last time my brother and I got together to work on games.  
        It was about 4 years after graduating UC Davis that Chris and I started conceiving our first serious commercial game ideas and formed our company, RogueWare.  Our mission was simple, we wanted to develop our own games from scratch and sell them on the monolithic PC games platform, Steam.  And we’d make our entrance with a flagship game, something deep and complex, something players could dig into and replay with fresh experiences.  We wanted to make the kind of game we wanted to play.  Our design philosophy borrows heavily from a lesser known genre of games known as roguelikes, which carries several core principles -  Most importantly, a heavy reliance on randomization, so no two playthroughs are the same, making each experience feel fresh, and permadeath, no save scumming here! There is far too much hand holding in modern games - the ability to save and just reload when you fail completely removes any penalty or threat.  The game is meant to be experienced in one frightening run, where you must suffer the consequences and rewards fated to you by the random number generator.  Each successive run makes a player wiser, and able to proceed further and deeper into the game.  With these ideals in mind we created our first commercially available game - FreeHolder (http://store.steampowered.com/app/463800/).  It’s not finished yet, but it’s well on it’s way to 1.0, and thanks to Steam’s Early Access platform we’ve been able to continue working on it after our initial funding dried up, while simultaneously getting valuable insight from our players.  
        As wonderful as it’s been living the gamedev dream, we’re not yet pulling in a level of funding that would allow us to quit our day jobs, and thus we come to the most practical reason i’ve come back to coding - as far as trade skills go, this is one of the most in demand and personally fascinating skillsets to become an expert in.  I only regret not pursuing it sooner.  When founding RogueWare with my brother, I was doing well enough financially thanks to a steady job of about 4 years and the largesse of my family allowed me to live with much less overhead while we got the company off the ground.  I was very excited to start a new chapter of my life and eager to quit my current however steady job as it was not making it worth my while and I had come to realize that marketing, particularly in an industry I had relatively little interest in, was not something I wanted to keep pursuing.  And so I put in my two weeks notice just a few months after forming RogueWare.  I regret nothing. There’s no greater feeling than creating your own dream job.  Chris and I agreed on a division of labor for FreeHolder: he would head the actual development of the game, and I would figure out how to get it in front of enough gamers that we could make it through the Greenlight process on Steam.  In the Spring of 2016 we finally got the thumbs up and set FreeHolder up for Early Access sale starting July 15th. 
        Since then we’ve sold over 1,100 copies and have maintained a positive review scoring. Really the only thing holding us back now is obscurity.  We still haven’t proven to the gamer community that RogueWare is a company that actually finishes games, and in a sea of Early Access titles that never get finished, we must complete that task, and Chris assures me that we will.  To that end i’ve felt increasingly helpless in assisting him, as the division of labor demands that my primary concern be sales, not development. But I didn’t start a game company with my brother so I could just count sales numbers and tweet at people to buy our game.  No - I started it to create games!  So it’s my hope that finally taking my amateur coding skills to a professional level will give me the skills to prototype and head development of RogueWare’s second game.  
        That of course is the highest aspiration for learning to code.  But the rubber has very much met the road in recent years financially.  I’ve burned through my savings over the years and have been paying rent and bills with money earned from ride-share services like Lyft, but here in Los Angeles, it’s becoming clear i’m going to need a more lucrative trade than chauffeur to prevent myself from being priced out of my hometown.  Learning to code is the most natural step I can take right now.  It fits every prescription, it furthers my dream of making games for a living but it will also teach me a skill that can get me out of the gig economy and into an actual career with benefits and decent pay.

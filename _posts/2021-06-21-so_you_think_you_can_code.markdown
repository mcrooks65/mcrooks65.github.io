---
layout: post
title:      "So you think you can code"
date:       2021-06-21 21:44:50 -0400
permalink:  so_you_think_you_can_code
---

Now that i'm on the brink of building a portfolio website and searching for work I thought i'd take some time to reflect on the difficulties I had getting to this point.  It's hard for me to express what it took to finally arrive at this point. However it's important that I do try, so that I can really internalize the lessons that i found helped me the most. It feels like forever ago when I decided to try and learn coding to the point of being an employable professional.   It's not just happenstance that it took me 4 years to do something I thought I could handle in 2, maybe even 1 and a half years.  The fact wasn't that I was spending the whole time coding and failing to make it happen, quite the opposite.  The purpose of this blog entry is to iterate these pitfalls that could bog down progress for other up and coming developers, and to hopefully help them achieve their goals at a faster timeline than I managed.  


In no particular order here are the pitfalls I found and the ways I learned to overcome them:

**1) Coding in a vacuum** 

You'll do yourself no favors trying to make great strides towards code mastery if you're not willing to reach out for help when you hit walls.  And you will hit walls, it's a part of the process of learning.  I struggled particularly hard with this first pitfall, being in a self-paced course should not have meant i always tried to go it alone.   Self-paced course or not you should still reach out to knowledgeable people.  This is valuable for all sorts of reasons if you're trying to make a career as a devleoper.  You'll need to get along with future coworkers, and getting comfortable showing and explaining your code to others so that you can learn most effectively.  On the otherside of your mastery of a subject you can reinforce your knowledge by -teaching- to others as well.

**2) Giving up mid struggle**  

It's hard to understate the neccessity of tenacity. You must respect the struggle, know that what you're doing isn't easy and that you may not get it at first, second or third attempt.  It might take months to really wrap you head around something new, but the fact is you -can- get there so long as you put the work in.  This is what it means to respect the struggle, that it's okay to fail, it's okay to fail repeatedly.  You're not stupid, you're still learning.  Do not let it scare you away.  Keep trying, seek help from experts when you hit walls, rinse and repeat until you've broken every barrier to your project goals.  This experience is well summarized by the Dunning-Kruger effect (see chart below).  When approaching any subject we know little about, we all stand tall at the peak of 'Mt. Stupid', over confident in our ability to proceed, before plunging directly into the 'Valley of Despair'. For me, and I must imagine most others that plunge is incredibly steep and it -will- feel like you're stuck in that valley.  Time effort, experience and practice, you will build the neccessary knowledge to ascend the 'Slope of Enlightenment' and perhaps even the ever sought after 'Plateau of Sustainability'.  

![](https://onlinepethealth.com/wp-content/uploads/2019/12/Dunning-Kruger.jpg)

**3) Getting overwhelmed by the scope of a project **

There's a trick i found when this sort of thing inevitably happens on your path to mastery.  Take smaller bites.  No huge project needs every 't' crossed and 'i' dotted all at once.  You should divide and conquer your project, prioritize what to work on, and only ever take a bite you know you can handle.  It's also important when building any new project that you build 'vertically' not 'horizontally'.  This is especially important as a full stack developer because there are many interacting layers to your applications and your best bet is to connect one thing up to all of those layers before making any layers 'wider'.  For example It's good practice to make sure your rails backend and react-redux front end are communicating properly before you start adding tons of new schema to your database or building out a front-end feature.  This idea of vertical vs horizontal project building is well explained here [https://github.com/learn-co-students/js-spa-project-instructions-online-web-sp-000/blob/master/project-planning-tips.md](https://github.com/learn-co-students/js-spa-project-instructions-online-web-sp-000/blob/master/project-planning-tips.md) under the 'Build vertically, not horizontally' header.

**4) Errors abound!** 

Believe it or not, and perhaps you believe it more than I first did, most of coding is deciphering error messages, not just knowing and typing out lines of code.  Learning to embrace error codes not as hang ups but as a chance to understand just what went wrong takes time and practice. Oftentimes getting a 'new' or different error code is excellent news since you might have gotten passed the -last- error.  It comes down to really knowing your code and identifying where breakdowns happen.  This is the art of debugging and you will spend a lifetime cultivating it. Often enough with JavaScript you can get to the bottom of what's triggering an error code with a few console.log() functions of whatever state you think might be broken.  JS is quite debugger friendly thankfully.  And even has a built in debugger you can simply add at any line of code and have everything stop right there so you can peer into the state of your machine.  Keep in mind though that every technology, every language, has it's own programs and best practices when it comes to debugging, that's why it's such an important skillset to develop.

With these four lessons taken to heart, I know i will never allow myself to get hung up on a tough project again.  I will respect the struggle, i've learned i can do things I thought were impossible for me when i was stuck in the 'valley of despair'.  All it took was time, effort, practice.  And a willingness to recognize that the material is hard and it's okay to struggle with it.  It's not a sign you can't hack it.  It's merely a sign you havn't hacked it yet. 
